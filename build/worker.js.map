{"version":3,"sources":["db.js","builder.js","model.js","migration.js","worker.js"],"names":[],"mappingsnp6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"worker.js","sourcesContent":["class DB {\n\n    constructor(idb, idbKey, settings, useWebWorker, pathToWebWorker) {\n        this.db = idb;\n        this.idbKey = idbKey;\n        this.settings = settings;\n        this.useWebWorker = useWebWorker || false;\n        this.isWebWorker = false;\n        this.pathToWebWorker = pathToWebWorker;\n    }\n\n    /**\n     * Initializes database connection with indexedDB\n     *\n     * @returns {Promise}\n     */\n    connect() {\n        let db = this;\n        return new Promise((resolve, reject) => {\n\n            if(db.useWebWorker){\n                db.createWorkerHandler(resolve, reject);\n            }else{\n                db.createNormalHandler(resolve, reject);\n            }\n        });\n    }\n\n    /**\n     * Destroys/Deletes the databaase\n     * @param dbName\n     */\n    destroy(dbName) {\n        console.info('database ' + dbName + ' deleted');\n        this.db.deleteDatabase(dbName);\n    }\n\n    /**\n     * Creates connection in web worker space and if web worker fails\n     * then creates normal database connection instance\n     * @param resolve\n     * @param reject\n     */\n    createWorkerHandler (resolve, reject) {\n        let db = this;\n        try{\n            let worker = new window.Worker(db.pathToWebWorker);\n            let models = {};\n            let timestamp = Date.now();\n\n            worker.postMessage({\n                detail : JSON.stringify(db.settings),\n                action : 'initialize',\n                timestamp : timestamp\n            });\n            \n            worker.onmessage = function (e) {\n                if(e.data.action === 'initialize' && e.data.timestamp === timestamp) {\n                    if (e.data.detail === true) {\n                        db.settings.migrations.forEach((schema) => {\n                            Object.defineProperty(models, schema.name, {\n                                get() {\n                                    return new WorkerModelHandler(schema.name, worker, window);\n                                }\n                            });\n                        });\n\n                        db.isWebWorker = true;\n                        resolve(models);\n                    } else {\n                        db.createNormalHandler(resolve, reject);\n                    }\n                }\n            }\n\n        }catch (e) {\n            reject(e);\n        }\n\n    }\n\n    /**\n     * Creates normal database instance and models\n     * @param resolve\n     * @param reject\n     */\n    createNormalHandler (resolve, reject) {\n        let db = this;\n\n        let request = this.db.open(this.settings.dbName, this.settings.dbVersion);\n\n        request.onupgradeneeded = function (e) {\n            let mig = new Migration(e.target.result, e.target.transaction, db.settings.migrations);\n            mig.run();\n        };\n\n        request.onerror = function (e) {\n            reject(e);\n        };\n\n        request.onsuccess = function (e) {\n            let models = {};\n\n            db.settings.migrations.forEach((schema) => {\n                let primary = schema.primary || 'id';\n                Object.defineProperty(models, schema.name, {\n                    get() {\n                        return new Model(e.target.result, db.idbKey, schema.name, primary);\n                    }\n                });\n            });\n\n            resolve(models);\n        };\n    }\n}","class Builder {\n\n    constructor () {\n        this.builder = [];\n        this.indexBuilder = {};\n        this.relations = [];\n        this.tables = [];\n    }\n\n    /**\n     * Sets the index builder value as an 'and' reference\n     *\n     * @param indexName string\n     * @param value mixed\n     * @returns {Builder}\n     */\n    whereIndex(indexName, value) {\n\n        this.indexBuilder = {\n            index : indexName,\n            value : value,\n            type : 'and'\n        };\n\n        return this;\n    }\n\n    /**\n     * Sets the index builder value as an 'in' reference\n     * @param indexName\n     * @param value\n     * @returns {Builder}\n     */\n    whereIndexIn(indexName, value) {\n\n        this.indexBuilder = {\n            index : indexName,\n            value : value,\n            type : 'in'\n        };\n\n        return this;\n    }\n\n    /**\n     * Sets the index builder value with point inclusive and sets greater than check\n     * @param indexName\n     * @param value\n     * @returns {Builder}\n     */\n    indexGte(indexName, value) {\n\n        this.indexBuilder = {\n            index : indexName,\n            value : value,\n            type : 'gte'\n        };\n\n        return this;\n    }\n\n    /**\n     * Sets the index builder value with point not inclusive and sets greater than check\n     * @param indexName\n     * @param value\n     * @returns {Builder}\n     */\n    indexGt(indexName, value) {\n\n        this.indexBuilder = {\n            index : indexName,\n            value : value,\n            type : 'gt'\n        };\n\n        return this;\n    }\n\n    /**\n     * Sets the index builder value with point inclusive and sets less than check\n     * @param indexName\n     * @param value\n     * @returns {Builder}\n     */\n    indexLte(indexName, value) {\n\n        this.indexBuilder = {\n            index : indexName,\n            value : value,\n            type : 'lte'\n        };\n\n        return this;\n    }\n\n    /**\n     * Sets the index builder value with point not inclusive and sets less than check\n     *\n     * @param indexName\n     * @param value\n     * @returns {Builder}\n     */\n    indexLt(indexName, value) {\n\n        this.indexBuilder = {\n            index : indexName,\n            value : value,\n            type : 'lt'\n        };\n\n        return this;\n    }\n\n    /**\n     * Sets the index builder value with points inclusive and sets range between them\n     * @param indexName\n     * @param lower\n     * @param upper\n     * @returns {Builder}\n     */\n    indexBetween(indexName, lower, upper) {\n\n        this.indexBuilder = {\n            index : indexName,\n            value : [lower, upper],\n            type : 'between'\n        };\n\n        return this;\n    }\n\n    whereIn(attributeName, value) {\n        this.builder.push({\n            attribute : attributeName,\n            value : value,\n            type : 'in'\n        });\n\n        return this;\n    }\n\n    where(attributeName, value) {\n        this.builder.push({\n            attribute : attributeName,\n            value : value,\n            type : 'and'\n        });\n\n        return this;\n    }\n\n\n    gte(attributeName, value) {\n        this.builder.push({\n            attribute : attributeName,\n            value : value,\n            type : 'gte'\n        });\n\n        return this;\n    }\n\n    gt(attributeName, value) {\n        this.builder.push({\n            attribute : attributeName,\n            value : value,\n            type : 'gt'\n        });\n\n        return this;\n    }\n\n    lte(attributeName, value) {\n        this.builder.push({\n            attribute : attributeName,\n            value : value,\n            type : 'lte'\n        });\n\n        return this;\n    }\n\n    lt(attributeName, value) {\n        this.builder.push({\n            attribute : attributeName,\n            value : value,\n            type : 'lt'\n        });\n\n        return this;\n    }\n\n    between(attributeName, upper, lower) {\n        uppper = parseFloat(upper);\n        lower = parseFloat(lower);\n\n        if(isNaN(upper) || isNaN(lower)){\n            throw \"Between is only for numeric values\";\n        }\n\n        this.builder.push({\n            attribute : attributeName,\n            value : [upper, lower],\n            type : 'between'\n        });\n\n        return this;\n    }\n\n    relation(modelName, type, localKey, foreignKey, func, primary) {\n        this.tables.push(modelName);\n\n        this.relations.push({\n            modelName : modelName,\n            func : func,\n            localKey : localKey,\n            foreignKey : foreignKey,\n            type : type,\n            primary : primary\n        });\n\n        return this;\n    }\n\n    static get helpers() {\n\n        return {\n\n            checkNestedAttribute (attributeString, value, condition) {\n                return condition == Model.helpers.getNestedAttribute(attributeString, value)\n            },\n\n            getNestedAttribute(attributeString, value) {\n                let attributes = attributeString.split('.');\n                let i;\n                let content = value;\n\n                for(i = 0; i < attributes.length; i++) {\n                    if(content[attributes[i]] === undefined){\n                        return undefined;\n                    }\n\n                    content = content[attributes[i]];\n                }\n\n                return content;\n            },\n\n            replaceNestedValues(attributes, value) {\n                for(let attribute in attributes) {\n                    value[attribute] = attributes[attribute];\n                }\n\n                return value;\n            },\n        };\n\n    }\n\n    get RELATIONS () {\n        return Builder.RELATIONS;\n    }\n\n    static get RELATIONS() {\n        return {\n            hasOne : 'hasOne',\n            hasMany : 'hasMany'\n        }\n    }\n}","class Model extends Builder{\n\n    constructor(db, idbKey, modelName, primary){\n        super();\n\n        this.name = modelName;\n        this.db = db;\n        this.primary = primary;\n        this.tables = [this.name];\n        this.idbKey = idbKey;\n        this.hasIdbKey = this.idbKey ? true : false;\n        this.transaction = null;\n        this.attributes = {};\n    }\n\n    /**\n     * Finds the result on the primary key defined\n     * @param id\n     * @returns {Promise}\n     */\n    find(id) {\n        let model = this;\n\n        return new Promise((resolve, reject) => {\n            let transaction = model.getTransaction(model.tables, Model.READONLY);\n            let obj = transaction.objectStore(model.name);\n            let request = obj.get(id);\n            \n            request.onsuccess = function (e) {\n                resolve(e.target.result);\n            };\n\n            request.onerror = function (e) {\n                reject(e);\n            };\n\n        });\n    }\n\n    /**\n     * Searches for first value in database and returns that\n     * @returns {Promise}\n     */\n    first() {\n        let model = this;\n\n        return new Promise((resolve, reject) => {\n            let transaction = model.getTransaction(model.tables, Model.READONLY);\n            let obj = transaction.objectStore(model.name);\n            let result = null;\n            let request;\n\n            if(model.indexBuilder.type){\n                request = model.getIndexResult(obj);\n            }else{\n                request = obj.openCursor();\n            }\n\n            request.onsuccess = function (e) {\n                let cursor = e.target.result;\n\n                if(cursor){\n                    if(model.checkBuilderValue(cursor.value)){\n                        let relationsCompleted = 0;\n\n                        result = cursor.value;\n\n                        if(model.relations.length > 0 && (result !== null || result !== undefined)){\n\n\n                            model.relations.forEach((relation) => {\n\n                                let relationRequest = model.getRelationships(relation, model.transaction, model.getMainResult(result, relation.localKey, false), false);\n\n                                relationRequest.then((relationResult) => {\n\n                                    relationsCompleted++;\n\n                                    let defaultValue = model.getDefaultRelationValue(relation.type);\n                                    result[relation.modelName] = result[relation.modelName] || defaultValue;\n\n                                    switch (relation.type) {\n                                        case Model.RELATIONS.hasOne :\n                                            if (relationResult !== undefined) {\n                                                result[relation.modelName] = relationResult[relation.foreignKey] == result[relation.localKey] ? relationResult : result[relation.modelName];\n                                            }\n\n                                            break;\n                                        case Model.RELATIONS.hasMany :\n                                            if (relationResult.length > 0) {\n                                                result[relation.modelName] = relationResult.filter((relationResultItem) => {\n                                                    return relationResultItem[relation.foreignKey] == result[relation.localKey];\n                                                });\n                                            }\n                                            break;\n                                    }\n\n                                    if (relationsCompleted == model.relations.length) {\n                                        resolve(result);\n                                    }\n\n                                }).catch((err) => {\n                                    reject(err);\n                                });\n                            });\n                        }else{\n                            resolve(cursor.value);\n                            return false;\n                        }\n                    }else{\n                        cursor.continue();\n                    }\n\n                }else{\n                    resolve(result);\n                }\n            };\n\n            request.onerror = function(e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Function searches throughout the database and returns a array of result\n     * @returns {Promise}\n     */\n    get() {\n        let model = this;\n\n        return new Promise((resolve, reject) => {\n            let transaction = model.getTransaction(model.tables, Model.READONLY);\n            let obj = transaction.objectStore(model.name);\n            let result = [];\n            let request;\n\n            if(model.indexBuilder.type){\n                request = model.getIndexResult(obj);\n            }else{\n                request = obj.openCursor();\n            }\n\n            request.onsuccess = function (e) {\n                let cursor = e.target.result;\n\n                if(cursor){\n                    if(model.checkBuilderValue(cursor.value)){\n                        result.push(cursor.value);\n                    }\n                    cursor.continue();\n\n                }else{\n                    let mainResult, relationsCompleted = 0;\n\n                    if(model.relations.length > 0 && result.length > 0){\n\n\n                        model.relations.forEach((relation) => {\n\n                            let relationRequest = model.getRelationships(relation, model.transaction, model.getMainResult(result, relation.localKey, true), true);\n\n                            relationRequest.then((relationResult) => {\n\n                                relationsCompleted++;\n\n                                result = result.map(item => {\n\n                                    let defaultValue = model.getDefaultRelationValue(relation.type);\n                                    item[relation.modelName] = item[relation.modelName] || defaultValue;\n\n                                    switch (relation.type) {\n                                        case Model.RELATIONS.hasOne :\n                                            if(relationResult !== undefined) {\n                                                item[relation.modelName] = relationResult[relation.foreignKey] == item[relation.localKey] ? relationResult : item[relation.modelName];\n                                            }\n\n                                            break;\n                                        case Model.RELATIONS.hasMany :\n                                            if(relationResult.length > 0) {\n                                                item[relation.modelName] = relationResult.filter((relationResultItem) => {\n                                                    return relationResultItem[relation.foreignKey] == item[relation.localKey];\n                                                });\n                                            }\n                                            break;\n                                    }\n\n                                    return item;\n                                });\n\n                                if(relationsCompleted == model.relations.length){\n                                    resolve(result);\n                                }\n\n                            }).catch((err) => {\n                                reject(err);\n                            })\n                        });\n                    }else{\n                        resolve(result);\n                    }\n                }\n            };\n\n            request.onerror = function(e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Function creates a single record\n     * @param data\n     * @returns {Promise}\n     */\n    create(data) {\n        let model = this;\n\n        return new Promise((resolve, reject) => {\n            let transaction = model.getTransaction(model.tables, Model.READWRITE);\n\n            let obj = transaction.objectStore(model.name);\n\n            data.createdAt = Date.now();\n            data.updatedAt = Date.now();\n\n            let request = obj.add(data);\n\n            request.onsuccess = function (e) {\n                data[model.primary] = e.target.result;\n                resolve(data);\n            };\n\n            request.onerror = function (e) {\n                reject(e);\n            };\n        });\n\n    }\n\n    /**\n     * Function creates list of records passed\n     * @param dataRecords\n     * @returns {Promise}\n     */\n    createMultiple (dataRecords) {\n        let model = this;\n\n        return new Promise((resolve, reject) => {\n            let transaction = model.getTransaction(model.tables, Model.READWRITE);\n\n            let obj = transaction.objectStore(model.name);\n            let createdAt = Date.now();\n            let updatedAt = Date.now();\n            let result = [];\n\n            dataRecords.forEach((data) => {\n                data.createdAt = createdAt;\n                data.updatedAt = updatedAt;\n\n                let request = obj.add(data);\n\n                request.onerror = function(e) {\n                    reject(e);\n                };\n\n                request.onsuccess = function(e) {\n                    data[model.primary] = e.target.result;\n\n                    result.push(data);\n\n                    if(result.length === dataRecords.length){\n                        resolve(result);\n                    }\n                };\n            })\n        });\n    }\n\n    /**\n     * Function updates the various records with matching values\n     * @param data\n     * @returns {Promise}\n     */\n    update(data) {\n\n        let model = this;\n        let updatedAt = Date.now();\n\n        return new Promise((resolve, reject) => {\n            let transaction = model.getTransaction(model.tables, Model.READWRITE);\n            let obj = transaction.objectStore(model.name);\n            let request, totalRecordsBeingUpdated = 0, totalRecordsUpdated = 0;\n\n            if(model.indexBuilder.type){\n                request = model.getIndexResult(obj);\n            }else{\n                request = obj.openCursor();\n            }\n\n            request.onsuccess = function (e) {\n                let cursor = e.target.result;\n\n                if(cursor){\n                    if(model.checkBuilderValue(cursor.value)){\n                        totalRecordsBeingUpdated++;\n\n                        let id = cursor.value[model.primary];\n                        let createdAt = cursor.value.createdAt;\n\n                        let result = Model.helpers.replaceNestedValues(data, cursor.value);\n                        result[model.primary] = id;\n                        result.createdAt = createdAt;\n                        result.updatedAt = updatedAt;\n\n                        let updateRequest = cursor.update(result);\n\n                        updateRequest.onsuccess = function() {\n                            totalRecordsUpdated++;\n\n                            if(totalRecordsUpdated === totalRecordsBeingUpdated){\n                                resolve(true);\n                            }\n                        };\n\n                        updateRequest.onerror = function(err) {\n                            transaction.abort();\n                            reject(err);\n                        };\n\n                    }\n                    cursor.continue();\n\n                }else{\n                    resolve();\n                }\n            };\n\n            request.onerror = function(e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Function updates the record at the given id\n     * @param id\n     * @param data\n     * @returns {Promise}\n     */\n    save(id, data) {\n        let model = this;\n        let updatedAt = Date.now();\n\n        return new Promise((resolve, reject) => {\n\n            model.find(id).then((result) => {\n\n                if(!result){\n                    reject('No record found');\n                }\n\n                let transaction = model.getTransaction(model.tables, Model.READWRITE, true);\n                let obj = transaction.objectStore(model.name);\n\n                let id = result[model.primary];\n                let createdAt = result.createdAt;\n\n                result = Model.helpers.replaceNestedValues(data, result);\n                result[model.primary] = id;\n                result.createdAt = createdAt;\n                result.updatedAt = updatedAt;\n\n                let request = obj.put(result);\n\n                request.onsuccess = function () {\n                    resolve(true);\n                };\n\n                request.onerror = function(e) {\n                    reject(e);\n                }\n            }).catch((err) => {\n                reject(err);\n            });\n\n        });\n    }\n\n    /**\n     * Function deletes the entries at the given point\n     * @param id\n     * @returns {Promise}\n     */\n    destroyId(id) {\n        let model = this;\n\n\n        return new Promise((resolve, reject) => {\n            model.find(id).then((result) => {\n\n                if(!result){\n                    reject('result at id does not exists');\n                }\n\n                let transaction = model.getTransaction(model.tables, Model.READWRITE, true);\n                let obj = transaction.objectStore(model.name);\n                let request = obj.delete(id);\n\n                request.onsuccess = function (e) {\n                    resolve(e.target.result);\n                };\n\n                request.onerror = function (e) {\n                    reject(e);\n                };\n            }).catch(err => {\n                reject(err);\n            });\n\n\n        });\n    }\n\n    /**\n     * Function deletes the entries\n     * @returns {Promise}\n     */\n    destroy() {\n        let model = this;\n\n        return new Promise((resolve, reject) => {\n            let transaction = model.getTransaction(model.tables, Model.READWRITE);\n            let obj = transaction.objectStore(model.name);\n            let request, totalRecordsBeingDeleted = 0, totalRecordsDeleted = 0;\n\n            if (model.indexBuilder.type) {\n                request = model.getIndexResult(obj);\n            } else {\n                request = obj.openCursor();\n            }\n\n            request.onsuccess = function (e) {\n                let cursor = e.target.result;\n\n                if (cursor) {\n                    if (model.checkBuilderValue(cursor.value)) {\n                        totalRecordsBeingDeleted++;\n\n                        let deleteRequest = cursor.delete();\n\n                        deleteRequest.onsuccess = function () {\n                            totalRecordsDeleted++;\n\n                            if (totalRecordsDeleted === totalRecordsBeingDeleted) {\n                                resolve(true);\n                            }\n                        };\n\n                        deleteRequest.onerror = function (err) {\n                            transaction.abort();\n                            reject(err);\n                        };\n\n                    }\n                    cursor.continue();\n\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Function counts the number of records\n     * @returns {Promise}\n     */\n    count() {\n        let model = this;\n\n        return new Promise((resolve, reject) => {\n            let transaction = model.getTransaction(model.tables, Model.READONLY);\n            let obj = transaction.objectStore(model.name);\n            let result = 0;\n            let request;\n\n            if(model.indexBuilder.type){\n                request = model.getIndexResult(obj);\n            }else{\n                request = obj.openCursor();\n            }\n\n            request.onsuccess = function (e) {\n                let cursor = e.target.result;\n\n                if(cursor){\n                    if(model.checkBuilderValue(cursor.value)){\n                        result++;\n                    }\n\n                    cursor.continue();\n\n                }else{\n                    resolve(result);\n                }\n            };\n\n            request.onerror = function(e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Function averages the numeric value at the given point\n     * @param attribute\n     * @returns {Promise}\n     */\n    average (attribute) {\n        let model = this;\n\n        return new Promise((resolve, reject) => {\n            let transaction = model.getTransaction(model.tables, Model.READONLY);\n            let obj = transaction.objectStore(model.name);\n            let result = 0, totalRecords = 0;\n            let request;\n\n            if(model.indexBuilder.type){\n                request = model.getIndexResult(obj);\n            }else{\n                request = obj.openCursor();\n            }\n\n            request.onsuccess = function (e) {\n                let cursor = e.target.result;\n\n                if(cursor){\n                    if(model.checkBuilderValue(cursor.value)){\n                        totalRecords++;\n                        let tempResult = Model.helpers.getNestedAttribute(attribute, cursor.value);\n                        tempResult = parseFloat(tempResult);\n                        tempResult = isNaN(tempResult) ? 0 : tempResult;\n                        result += tempResult;\n                    }\n\n                    cursor.continue();\n\n                }else{\n                    resolve(result/totalRecords);\n                }\n            };\n\n            request.onerror = function(e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Reduce function is called with each passing iterator value and reduced value is returned\n     * @param func\n     * @param defaultCarry\n     * @returns {Promise}\n     */\n    reduce (func, defaultCarry) {\n        let model = this;\n\n        if(typeof func !== 'function'){\n            throw \"Parameter should be a function type\";\n        }\n\n        return new Promise((resolve, reject) => {\n            let transaction = model.getTransaction(model.tables, Model.READONLY);\n            let obj = transaction.objectStore(model.name);\n            let result = defaultCarry;\n            let request;\n\n            if(model.indexBuilder.type){\n                request = model.getIndexResult(obj);\n            }else{\n                request = obj.openCursor();\n            }\n\n            request.onsuccess = function (e) {\n                let cursor = e.target.result;\n\n                if(cursor){\n                    if(model.checkBuilderValue(cursor.value)){\n                        result = func(cursor.value, result);\n                    }\n\n                    cursor.continue();\n\n                }else{\n                    resolve(result);\n                }\n            };\n\n            request.onerror = function(e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Sets the index search criteria\n     * @param objectStore\n     * @returns {*}\n     */\n    getIndexResult(objectStore) {\n        let builder = this;\n        let range;\n        let index;\n\n\n        if(!builder.indexBuilder.type) {\n            return objectStore.openCursor();\n        }\n\n        if(builder.indexBuilder.index !== builder.primary){\n            index = objectStore.index(builder.indexBuilder.index);\n        }else{\n            index = objectStore;\n        }\n\n        switch (builder.indexBuilder.type) {\n            case 'and' :\n                range = builder.idbKey.only(builder.indexBuilder.value);\n                break;\n\n            case 'in' :\n                builder.whereIn(builder.indexBuilder.index, builder.indexBuilder.value);\n                let values = builder.indexBuilder.value.sort();\n                range = builder.idbKey.bound(values[0], values[values.length - 1], false, false);\n                break;\n\n            case 'gte' :\n                range = builder.idbKey.lowerBound(builder.indexBuilder.value, false);\n                break;\n\n            case 'gt' :\n                range = builder.idbKey.lowerBound(builder.indexBuilder.value, true);\n                break;\n\n            case 'lte' :\n                range = builder.idbKey.upperBound(builder.indexBuilder.value, false);\n                break;\n\n            case 'lt' :\n                range = builder.idbKey.lowerBound(builder.indexBuilder.value, true);\n                break;\n\n            case 'between' :\n                range = builder.idbKey.bound(builder.indexBuilder.value[0], builder.indexBuilder.value[1], false, false);\n                break;\n            default :\n                throw 'Invalid builder type found';\n        }\n\n        return index.openCursor(range);\n    }\n\n    /**\n     * Checks common search criteria other than the index values\n     * @param value\n     * @returns {boolean}\n     */\n    checkBuilderValue(value) {\n        let builder = this;\n        let result = true;\n        let i,j;\n        for (i = 0; i < builder.builder.length; i++){\n\n            let condition = builder.builder[i];\n            switch(condition.type){\n\n                case 'and' : //case for one to one search\n                    if(!Model.helpers.checkNestedAttribute(condition.attribute, value, condition.value)){\n                        return false;\n                    }\n                    break;\n\n                case 'in' : //case for list search\n                    let tempCheck = false;\n                    for(j = 0; j < condition.value.length; j++) {\n                        result = Model.helpers.checkNestedAttribute(condition.attribute, value, condition.value[j]);\n                        if(result !== undefined && result !== false) {\n                            tempCheck = true;\n                        }\n                    }\n\n                    if(!tempCheck){\n                        return false;\n                    }\n\n                    result = true;\n\n                    break;\n\n                case 'gte' : //case for checking the value is greater than or is equal to the same\n                    result = Model.helpers.getNestedAttribute(condition.attribute, value);\n\n                    if(result === undefined) {\n                        return false;\n                    }\n\n                    if(result < condition.value){\n                        return false;\n                    }\n\n                    result = true;\n                    break;\n\n                case 'gt' : //case for checking the value is greater than the same\n\n                    result = Model.helpers.getNestedAttribute(condition.attribute, value);\n\n                    if(result === undefined) {\n                        return false;\n                    }\n\n                    if(result <= condition.value){\n                        return false;\n                    }\n\n                    result = true;\n                    break;\n\n                case 'lte' : //case for checking the value is less than or is equal to the same\n                    result = Model.helpers.getNestedAttribute(condition.attribute, value);\n\n                    if(result === undefined) {\n                        return false;\n                    }\n\n                    if(result > condition.value){\n                        return false;\n                    }\n                    result = true;\n                    break;\n\n                case 'lt' : //case for checking the value is less than the same\n                    result = Model.helpers.getNestedAttribute(condition.attribute, value);\n\n                    if(result === undefined) {\n                        return false;\n                    }\n\n                    if(result >= condition.value){\n                        return false;\n                    }\n                    result = true;\n                    break;\n\n                case 'between' : //case for checking the value is between the given range(ONLY WORKS FOR NUMERIC)\n                    result = Model.helpers.getNestedAttribute(condition.attribute, value);\n\n                    if(result === undefined) {\n                        return false;\n                    }\n\n                    if(condition.value[0] >= result && condition.value[1] <= result){\n                        return false\n                    }\n                    result = true;\n                    break;\n\n                default:\n                    result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Creates a transaction\n     * @param tables\n     * @param mode\n     */\n    createTransaction(tables, mode) {\n        this.transaction = this.db.transaction(tables, mode)\n    }\n\n    /**\n     * Sets IDBTransaction obejct to current model scope\n     * @param transaction\n     */\n    setTransaction(transaction) {\n        this.transaction = transaction\n    }\n\n    /**\n     * Returns the IDBTransaction object set in current scope\n     * @param {Array} tables\n     * @param {String} mode\n     * @param {boolean} overwrite\n     * @returns {*|null}\n     */\n    getTransaction(tables, mode, overwrite) {\n        overwrite = overwrite === undefined ? false : overwrite;\n\n        if(!this.transaction || overwrite === true) {\n            this.createTransaction(tables, mode);\n        }\n\n        return this.transaction;\n    }\n\n    /**\n     * Returns the array or direct key value against the input give for the key specified\n     * @param result\n     * @param key\n     * @param isArray\n     * @returns {*}\n     */\n    getMainResult (result, key, isArray) {\n        if(isArray){\n            return result.map((item) => {\n                return item[key];\n            });\n        }else{\n            return result[key];\n        }\n    }\n\n    /**\n     * Searches for relationships assigned with builder and fetches them\n     * @param relation\n     * @param transaction\n     * @param mainResult\n     * @param isArray\n     * @returns {Promise}\n     */\n    getRelationships (relation, transaction, mainResult, isArray) {\n\n        isArray = isArray || false;\n\n        let model = this;\n        let primary = relation.primary || 'id';\n\n        /**\n         * @var Model relationModel\n         */\n        let relationModel = new Model(model.db, model.idbKey, relation.modelName, relation.primary);\n\n        //setting the relation transaction same as parent transaction\n        relationModel.setTransaction(transaction);\n\n        //if a secondry builder function was defined\n        if(relation.func){\n            let tempBuilder = new Builder();\n\n            tempBuilder = relation.func(tempBuilder);\n\n            relationModel.tables = tempBuilder.tables;\n            relationModel.tables.push(relationModel.name);\n            relationModel.relations = tempBuilder.relations;\n            relationModel.builder = tempBuilder.builder;\n        }\n\n        //checking type of parent result\n        if(isArray){\n            relationModel.whereIndexIn(relation.foreignKey, mainResult);\n        }else{\n            relationModel.whereIndex(relation.foreignKey, mainResult);\n        }\n\n        return new Promise((relationResolve, relationReject) => {\n\n            let result;\n\n            //if relation type mentioned\n            switch (relation.type) {\n                case Model.RELATIONS.hasOne :\n                    result = relationModel.first();\n                    break;\n                case Model.RELATIONS.hasMany :\n                    result = relationModel.get();\n                    break;\n                default :\n                    throw \"Invalid relation type provided\";\n            }\n\n            result.then(r => {\n                relationResolve(r);\n            }).catch(err => {\n                relationReject(err);\n            });\n\n        });\n    }\n\n    /**\n     * Gets the default value of result. Null for hasOne and array for hasMany\n     * @param type\n     * @returns {*}\n     */\n    getDefaultRelationValue(type) {\n    switch (type) {\n        case Model.RELATIONS.hasOne :\n            return null;\n        case Model.RELATIONS.hasMany :\n            return [];\n        default :\n            return null;\n    }\n}\n\n\n    /**\n     * Readwrite parameter of indexedDB\n     * @return {string}\n     */\n    static get READWRITE() {\n        return \"readwrite\";\n    }\n\n    /**\n     * Readonly parameter of indexedDB\n     * @return {string}\n     */\n    static get READONLY() {\n        return \"readonly\";\n    }\n\n}\n","class Migration {\n    constructor(db, transaction, migrations) {\n        /**\n         * @var IDBDatabase db\n         */\n        this.db = db;\n        this.migrations = migrations;\n        this.objectStores = [];\n\n        /**\n         * @var IDBTransaction transaction\n         */\n        this.transaction = transaction;\n    }\n\n    createStore(schema) {\n        let mig = this;\n        let primary = schema.primary || 'id';\n\n        let objectStore = mig.db.createObjectStore(schema.name, {keyPath: primary, autoIncrement: true});\n        mig.objectStores.push(objectStore);\n\n        if (schema.columns) {\n            schema.columns.forEach((column) => mig.makeIndex(column, objectStore));\n        }\n\n\n    }\n\n    run() {\n        let mig = this;\n\n        mig.migrations.forEach((schema) => {\n            if(mig.db.objectStoreNames.contains(schema.name)){\n\n                if(schema.drop){\n                    mig.db.deleteObjectStore(schema.name);\n                }else{\n                    mig.updateStore(schema);\n                }\n\n\n            }else{\n                mig.createStore(schema);\n            }\n        });\n    }\n\n    makeIndex(column, objectStore) {\n        column.attributes = column.attributes || {};\n        column.index = column.index || column.name;\n        objectStore.createIndex(column.name, column.index, column.attributes);\n    }\n\n    updateStore(schema) {\n        let mig = this;\n\n        let objectStore = mig.transaction.objectStore(schema.name);\n\n        if (schema.columns) {\n\n            schema.columns.forEach((column) => {\n                if(!objectStore.indexNames.contains(column.name)){\n                    mig.makeIndex(column, objectStore)\n                }\n            });\n        }\n\n        if(schema.dropColumns) {\n            schema.dropColumns.forEach((column) => {\n                if(objectStore.indexNames.contains(column)){\n                    mig.dropIndex(column, objectStore)\n                }\n            });\n        }\n    }\n\n    dropIndex(columnName, objectStore) {\n        debugger;\n        objectStore.deleteIndex(columnName);\n    }\n\n}\n","importScripts('db.js', 'builder.js', 'model.js', 'migration.js');\n\nlet db, models;\nlet errorNamespace = '-error';\n\nself.addEventListener('message', (e) => {\n    \"use strict\";\n    JSON.parse(e.data.detail);\n    let data = JSON.parse(e.data.detail, (key, value) => {\n        if(typeof value != 'string'){\n            return value;\n        }\n        return ( value.indexOf('function') >= 0 || value.indexOf('=>') >= 0) ? eval('('+value+')') : value;\n    });\n    self.emit(data, e.data.timestamp, e.data.action, e.data.model);\n});\n\nself.addEventListener('idb:worker:initialize', (e) => {\n    \"use strict\";\n\n    let idb = self.indexedDB || self.mozIndexedDB || self.webkitIndexedDB || self.msIndexedDB;\n    let idbKey = self.IDBKeyRange || self.webkitIDBKeyRange || self.msIDBKeyRange;\n\n    db = new DB(idb, idbKey, e.detail.detail, false);\n\n    db.connect()\n        .then((m) => {\n            models = m;\n            self.send(true, e.detail.timestamp, e.detail.action);\n        })\n        .catch((e) => self.send(false, e.detail.timestamp, e.detail.action));\n\n});\n\nself.emit = function (data, timestamp, action, model) {\n    let ev = new self.CustomEvent('idb:worker:' + action, {\n        detail: {\n            detail: data,\n            timestamp: timestamp,\n            action: action,\n            model: model\n        }\n    });\n\n    self.dispatchEvent(ev);\n};\n\nself.send = function (data, timestamp, action) {\n    \"use strict\";\n\n    let ev = {\n        detail: data,\n        action: action,\n        timestamp: timestamp,\n    };\n\n    self.postMessage(ev);\n};\n\n\nself.addEventListener('idb:worker:create', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n\n    m.create(e.detail.detail)\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(er => {\n            self.send(er, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});\n\nself.addEventListener('idb:worker:find', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n    m.builder = e.detail.detail.builder;\n    m.indexBuilder = e.detail.detail.indexBuilder;\n    m.tables = e.detail.detail.tables;\n    m.relations = e.detail.detail.relations;\n\n    m.find(e.detail.detail)\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(er => {\n            self.send(er, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});\n\nself.addEventListener('idb:worker:createMultiple', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n    m.createMultiple(e.detail.detail)\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(er => {\n            self.send(er, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});\n\nself.addEventListener('idb:worker:get', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n    m.builder = e.detail.detail.builder;\n    m.indexBuilder = e.detail.detail.indexBuilder;\n    m.tables = e.detail.detail.tables;\n    m.relations = e.detail.detail.relations;\n\n    m.get(e.detail.detail)\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(er => {\n            self.send(er, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});\n\nself.addEventListener('idb:worker:first', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n    m.builder = e.detail.detail.builder;\n    m.indexBuilder = e.detail.detail.indexBuilder;\n    m.tables = e.detail.detail.tables;\n    m.relations = e.detail.detail.relations;\n\n    m.first(e.detail.detail)\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(err => {\n            self.send(err, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});\n\nself.addEventListener('idb:worker:update', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n\n    m.update(e.detail.detail)\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(er => {\n            self.send(er, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});\n\nself.addEventListener('idb:worker:save', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n\n    m.save(e.detail.detail.id, e.detail.detail.data)\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(er => {\n            self.send(er, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});\n\nself.addEventListener('idb:worker:count', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n\n    m.count()\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(er => {\n            self.send(er, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});\n\nself.addEventListener('idb:worker:average', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n\n    m.average(e.detail.detail)\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(er => {\n            self.send(er, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});\n\n\nself.addEventListener('idb:worker:reduce', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n\n    m.reduce(e.detail.detail.func, e.detail.detail.defaultCarry)\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(er => {\n            self.send(er, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});\n\nself.addEventListener('idb:worker:destroyId', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n\n    m.destroyId(e.detail.detail)\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(er => {\n            self.send(er, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});\n\nself.addEventListener('idb:worker:destroy', (e) => {\n    \"use strict\";\n\n    let m = models[e.detail.model];\n\n    m.destroy()\n        .then((result) => {\n            self.send(result, e.detail.timestamp, e.detail.action);\n        })\n        .catch(er => {\n            self.send(er, e.detail.timestamp, e.detail.action + errorNamespace);\n        });\n});"]}